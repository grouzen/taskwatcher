#!/usr/bin/perl -w
# 
# Copyright (c) 2012 Nedokushev Michael <grouzen.hexy@gmail.com>
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# About program:
#    taskwatcher is an small piece of perl code
#    to note time that you spend working on tasks.
# 

use strict;
use utf8;

use File::Lockfile;

use Pod::Usage;
use Getopt::Long;

use Local::Taskwatcher::DB;
use Local::Taskwatcher::Printer qw(INFO SUCCESS ERROR);

# Format of the db file:
# current: taskname
# tasks:
#     task1:
#         descr: very cool description of this task
#         time: 01201230123
#         create_time: 123123123123
#         done: 0
#         days:
#             2012_11_28: 012301230
#             2012_11_27: 0123232323
#         commits:
#             hashkeyofcommit:
#                create_time: 123123123
#                spended_time: 12312
#         tasks:
#              -/same info as on parent task/-
#      task2:
#         ...
#
my $dbfilename = $ENV{HOME} . "/.taskwatcher.db";

# Lockfile need to prevent of starting several taskwatchers apps
my $lockfile = File::Lockfile->new("taskwatcher.pid", '/tmp');

my $options = {
    #descr => '',
    verbose => 0
};

# Launch program.
GetOptions("help|usage" => sub { pod2usage(-verbose => 2, -exitval => 0) },
           "v|verbose" => \$options->{verbose},
           "a|add" => \$options->{add},
           "d|delete" => \$options->{remove},
           "descr=s" => \$options->{descr},
           "r|run" => \$options->{run},
           "s|status" => \$options->{status},
           "l|tasks-list" => \$options->{tasks_list},
           "c|commit" => \$options->{commit}
    );

my $taskname = $ARGV[0];

my $printer = Local::Taskwatcher::Printer->new($options->{verbose});
my $db = Local::Taskwatcher::DB->new($dbfilename, $printer);
return if !defined($db->open());

if($options->{tasks_list}) {
    $db->tasks_list();
    exit 0;
}

if(!defined($taskname)) {
    print $printer->p("taskname is not defined, see help(-h).\n");
    exit 1;
}

if($options->{status}) {
    $db->status($taskname);
    exit 0;
} elsif($options->{descr}) {
    $db->set_descr($taskname, $options->{descr});
    exit 0;
}

if(my $pid = $lockfile->check()) {
    print $printer->p("taskwatcher is already running with PID: $pid\n");
    exit;
}

$lockfile->write;

if($options->{add}) {
    $db->add_task($taskname, $options->{descr});
} elsif($options->{remove}) {
    $db->remove_task($taskname);
} elsif($options->{run}) {
    my $task = $db->get_task($taskname);

    if(defined($task)) {
        my $ticks = 0;

        while(1) {
            print "\r" . $printer->p($printer->human_time($task->delta_time + $ticks));

            sleep(1);
            $ticks++;

            if($db->need_update($ticks)) {
                $task->add_delta_time($ticks);
                $db->write();
                $ticks = 0;
            }
        }
    } else {
        print "Task not found: $taskname\n";
    }
}

$lockfile->remove;

__END__

=head1 NAME

TaskWatcher

=head1 SYNOPSIS

taskwatcher [options] [taskname]

taskname format: foo.bar.baz(bar is a child of foo).

Options:
    -h, --help, --usage                     Show this message.
    -a, --add                               Create task with a name=taskname
    -d, --delete                            Remove task.
        --descr=descr                       Set a description of the task.
    -r, --run                               Run task.
    -s, --status                            Print status of the task.
    -l, --list-tasks                        Show all tasks.
    -v, --verbose                           Write more.
    
=cut
